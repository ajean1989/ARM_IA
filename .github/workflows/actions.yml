name: ARM_IA CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    
    environment: my-env
    env:
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}


    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: info
        run: pwd && ls -l

      - name: Clone "repo" repository
        run: cd .. && git clone https://github.com/ajean1989/ARM_Starter.git && pwd

      - name: lancer le starter kit
        run: cd ../ARM_Starter && bash ./run/build.sh

      - name: info
        run: pwd && ls -l

      - name: lancer l'api
        run: cd ../ARM_IA && bash ./run/build.sh


  tests:
    runs-on: ubuntu-latest
    
    environment: my-env
    env:
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}
      


    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: info
        run: pwd && ls -l

      - name: Clone "repo" repository
        run: cd .. && git clone https://github.com/ajean1989/ARM_Starter.git

      - name: lancer le starter kit
        run: cd ../ARM_Starter && bash ./run/build.sh

      - name: lancer l'api
        run: mkdir ./api/app/temp && bash ./run/tests.sh

      - name: Run tests unitaires api
        run: |
          docker exec api-ia python -m pytest -sv

      - name: lance le container de tests fonctionnels
        run: cd tests_fonctionnels_api && docker compose up -d --build

      - name: Run tests fontionnels
        run: |
          docker exec tests-api-ia python -m pytest -sv



  deploy:
    needs: tests
    runs-on: ubuntu-latest

    environment: my-env
    env:
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}
      SSH_PRIVATE_KEY_VPS1: ${{ secrets.SSH_PRIVATE_KEY_VPS1 }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: info
      run: pwd && ls && echo "----" && printenv

    - name: private key copy
      run: mkdir ~/.ssh && echo "$SSH_PRIVATE_KEY_VPS1" > ~/.ssh/id_test && sudo chmod 600 ~/.ssh/id_test

    - name: rm api-ia active container
      run: cat ~/.ssh/id_test && ssh -i ~/.ssh/id_test -o StrictHostKeyChecking=no debian@$SERVER_VPS1_IP "if [docker container ps -a | grep -q 'api-ia']; then docker rm -f api-ia; fi"

    - name: Copy api files
      run: scp -i ~/.ssh/id_test -r ./api debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_IA/api

    - name: Copy run file
      run: scp -i ~/.ssh/id_test ./run/build.sh debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_IA/api/build.sh
        

    - name: run containers
      run: |
        ssh -i ~/.ssh/id_test -o StrictHostKeyChecking=no debian@$SERVER_VPS1_IP "export ARM_VPS1_API_KEY=$ARM_VPS1_API_KEY \
        && export PWD_MARIADB=$PWD_MARIADB \
        && export PWD_MONGODB=$PWD_MONGODB \
        && export SERVER_VPS1_IP=$SERVER_VPS1_IP \
        && export USER_MARIADB=$USER_MARIADB \
        && export USER_MONGODB=$USER_MONGODB \
        && cd /home/debian/ARMarket/ARM_IA/api \
        && bash build.sh"

